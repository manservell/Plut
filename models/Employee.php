<?php

namespace app\models;

use mongosoft\file\UploadImageBehavior;

use Yii;

/**
 * This is the model class for table "employee".
 *
 * @property string $id
 * @property string $username
 * @property string $password
 * @property string $first_name
 * @property string $middle_name
 * @property string $last_name
 * @property string $department_id
 * @property string $sector_id
 * @property string $role
 * @property string $status
 */
class Employee extends \yii\db\ActiveRecord

{

    public $new_pass;
    private $_role;
    public $photo_del;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'employee';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['first_name', 'middle_name', 'last_name', 'department_id', 'sector_id', 'username'], 'required'],
            [['photo'], 'required', 'on' => 'insert'],
            [['department_id', 'sector_id', 'status'], 'integer'],
            [['first_name', 'middle_name', 'last_name'], 'string', 'max' => 55],
            [['photo'], 'image', 'extensions' => 'jpg, jpeg, gif, png', 'on' => ['insert', 'update']],
            [['photo_del'], 'boolean'],
            [['username'], 'string', 'max' => 30],
            [['username'], 'unique'],
            [['new_pass'], 'string', 'max' => 16],
            [['new_pass'], 'generatePass'],
            [['new_pass'], 'generatePass', 'skipOnEmpty' => false, 'skipOnError' => false],
            [['password'], 'string', 'max' => 50],
            [['password'], 'validatePassword'],
            [['role'], 'string', 'max' => 64],

        ];
    }

    public function getRoles(){
        return $this->hasOne(AuthAssignment::className(), ['user_id'=>'id']);
    }

    public function getRole(){
        return isset($this->_role)? $this->_role : $this->roles->item_name;
    }

    public function afterSave($insert, $changedAttributes)
    {
        if(empty($this->_role))
            $this->_role = 'Guest';
        $authAssignment = AuthAssignment::find()->where('user_id = "'. $this->id .'"')->one();
        if(is_null($authAssignment))
            $authAssignment = new AuthAssignment();
        $authAssignment->item_name = $this->_role;
        $authAssignment->created_at = time();
        $authAssignment->user_id = $this->id;
        if(!$authAssignment->save()){
            header('Content-Type: text/html; charset=utf-8');
            echo 'Не удалось присвоить роль';
            var_dump($this->_authAssignment->errors);
            exit(0);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function setRole($role){
        $this->_role = $role;
    }

    public function getSectors(){
        return $this->hasOne(Sector::className(), ['id'=>'sector_id']);
    }

    /* Геттер для названия сектора*/
    public function getSectorName() {
        return $this->sectors->sector;
    }

    public function getDepartments(){
        return $this->hasOne(DepartmentStructure::className(), ['id'=>'department_id']);
    }

    /* Геттер для названия департамента*/
    public function getDepartmentName() {
        return $this->departments->structure_category;
    }

    /* Геттер для ФИО*/
    public function getFullName() {
        return $this->last_name. ' '. $this->first_name. ' ' . $this->middle_name;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'username' => Yii::t('app', 'Логин'),
            'password' => Yii::t('app', 'Пароль'),
            'first_name' => Yii::t('app', 'Имя'),
            'middle_name' => Yii::t('app', 'Отчество'),
            'last_name' => Yii::t('app', 'Фамилия'),
            'department_id' => Yii::t('app', 'Категория по структуре отдела'),
            'departmentName' => Yii::t('app', 'Категория по структуре отдела'),
            'status' => Yii::t('app', 'Статус'),
            'sector_id' => Yii::t('app', 'Сектор'),
            'sectorName' => Yii::t('app', 'Сектор'),
            'fullName' => Yii::t('app', 'ФИО'),
            'photo' => Yii::t('app', 'Фото сотрудника'),
            'photo_del' => Yii::t('app', 'Удалить фото'),
            'role' => Yii::t('app', 'Роль'),
            'new_pass' => Yii::t('app', 'Новый пароль'),
            'photo_del' => Yii::t('app', 'Удалить фото'),
        ];
    }

    /**
     * @inheritdoc
     * @return EmployeeQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new EmployeeQuery(get_called_class());
    }
    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */

    public function validatePassword($password)
    {
        return $this->password === md5(md5($password));
    }

    public function generatePass($attribute)
    {
        if(!empty($this->new_pass)){
            $this->password = md5(md5($this->new_pass));
        }
        if(empty($this->password)) {
            $this->addError($attribute, 'Заполните пароль!');
            return false;
        }
        return true;
    }
    public function behaviors()
    {
        return [
            [
                'class' => UploadImageBehavior::className(),
                'attribute' => 'photo',
                'scenarios' => ['insert', 'update'],
                'placeholder' => '@webroot/uploads/default-placeholder.png',
                'path' => '@webroot/uploads/',
                //'path' => '@photopass/uploads/',
                'url' => '@web/uploads/',
                //'url' => '@photoemployees/uploads/',
                'unlinkOnSave' => true,
                'unlinkOnDelete' => true,
                'thumbs' => [
                    'thumb' => ['width' => 400, 'quality' => 90],
                    'preview' => ['width' => 200, 'height' => 200],// меняет размер фотографии в update
                    'news_thumb' => ['width' => 200, 'height' => 200, 'bg_color' => '000'],
                ],
            ],
        ];
    }
}
